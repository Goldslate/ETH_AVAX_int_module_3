/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ERC20, ERC20Interface } from "../ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "reciever",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "reciever",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012003803806200120083398181016040528101906200003791906200029c565b826001908162000048919062000581565b5081600290816200005a919062000581565b50806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000668565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200010d82620000c2565b810181811067ffffffffffffffff821117156200012f576200012e620000d3565b5b80604052505050565b600062000144620000a4565b905062000152828262000102565b919050565b600067ffffffffffffffff821115620001755762000174620000d3565b5b6200018082620000c2565b9050602081019050919050565b60005b83811015620001ad57808201518184015260208101905062000190565b60008484015250505050565b6000620001d0620001ca8462000157565b62000138565b905082815260208101848484011115620001ef57620001ee620000bd565b5b620001fc8482856200018d565b509392505050565b600082601f8301126200021c576200021b620000b8565b5b81516200022e848260208601620001b9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002648262000237565b9050919050565b620002768162000257565b81146200028257600080fd5b50565b60008151905062000296816200026b565b92915050565b600080600060608486031215620002b857620002b7620000ae565b5b600084015167ffffffffffffffff811115620002d957620002d8620000b3565b5b620002e78682870162000204565b935050602084015167ffffffffffffffff8111156200030b576200030a620000b3565b5b620003198682870162000204565b92505060406200032c8682870162000285565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038957607f821691505b6020821081036200039f576200039e62000341565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003ca565b620004158683620003ca565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004626200045c62000456846200042d565b62000437565b6200042d565b9050919050565b6000819050919050565b6200047e8362000441565b620004966200048d8262000469565b848454620003d7565b825550505050565b600090565b620004ad6200049e565b620004ba81848462000473565b505050565b5b81811015620004e257620004d6600082620004a3565b600181019050620004c0565b5050565b601f8211156200053157620004fb81620003a5565b6200050684620003ba565b8101602085101562000516578190505b6200052e6200052585620003ba565b830182620004bf565b50505b505050565b600082821c905092915050565b6000620005566000198460080262000536565b1980831691505092915050565b600062000571838362000543565b9150826002028217905092915050565b6200058c8262000336565b67ffffffffffffffff811115620005a857620005a7620000d3565b5b620005b4825462000370565b620005c1828285620004e6565b600060209050601f831160018114620005f95760008415620005e4578287015190505b620005f0858262000563565b86555062000660565b601f1984166200060986620003a5565b60005b8281101562000633578489015182556001820191506020850194506020810190506200060c565b868310156200065357848901516200064f601f89168262000543565b8355505b6001600288020188555050505b505050505050565b610b8880620006786000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806342966c681161006657806342966c68146101205780638da5cb5b1461013c57806395d89b411461015a578063a9059cbb14610178578063f8b2cb4f1461019457610093565b806306fdde031461009857806318160ddd146100b657806327e235e3146100d457806340c10f1914610104575b600080fd5b6100a06101c4565b6040516100ad9190610722565b60405180910390f35b6100be610252565b6040516100cb919061075d565b60405180910390f35b6100ee60048036038101906100e991906107db565b610258565b6040516100fb919061075d565b60405180910390f35b61011e60048036038101906101199190610834565b610270565b005b61013a60048036038101906101359190610874565b610371565b005b610144610465565b60405161015191906108b0565b60405180910390f35b610162610489565b60405161016f9190610722565b60405180910390f35b610192600480360381019061018d9190610834565b610517565b005b6101ae60048036038101906101a991906107db565b610649565b6040516101bb919061075d565b60405180910390f35b600180546101d1906108fa565b80601f01602080910402602001604051908101604052809291908181526020018280546101fd906108fa565b801561024a5780601f1061021f5761010080835404028352916020019161024a565b820191906000526020600020905b81548152906001019060200180831161022d57829003601f168201915b505050505081565b60045481565b60036020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f590610977565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461034d91906109c6565b92505081905550806004600082825461036691906109c6565b925050819055505050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ea90610a6c565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104429190610a8c565b92505081905550806004600082825461045b9190610a8c565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054610496906108fa565b80601f01602080910402602001604051908101604052809291908181526020018280546104c2906108fa565b801561050f5780601f106104e45761010080835404028352916020019161050f565b820191906000526020600020905b8154815290600101906020018083116104f257829003601f168201915b505050505081565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059090610b32565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105e89190610a8c565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461063e91906109c6565b925050819055505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106cc5780820151818401526020810190506106b1565b60008484015250505050565b6000601f19601f8301169050919050565b60006106f482610692565b6106fe818561069d565b935061070e8185602086016106ae565b610717816106d8565b840191505092915050565b6000602082019050818103600083015261073c81846106e9565b905092915050565b6000819050919050565b61075781610744565b82525050565b6000602082019050610772600083018461074e565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107a88261077d565b9050919050565b6107b88161079d565b81146107c357600080fd5b50565b6000813590506107d5816107af565b92915050565b6000602082840312156107f1576107f0610778565b5b60006107ff848285016107c6565b91505092915050565b61081181610744565b811461081c57600080fd5b50565b60008135905061082e81610808565b92915050565b6000806040838503121561084b5761084a610778565b5b6000610859858286016107c6565b925050602061086a8582860161081f565b9150509250929050565b60006020828403121561088a57610889610778565b5b60006108988482850161081f565b91505092915050565b6108aa8161079d565b82525050565b60006020820190506108c560008301846108a1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061091257607f821691505b602082108103610925576109246108cb565b5b50919050565b7f596f7520617265206e6f7420746865204f776e65720000000000000000000000600082015250565b600061096160158361069d565b915061096c8261092b565b602082019050919050565b6000602082019050818103600083015261099081610954565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d182610744565b91506109dc83610744565b92508282019050808211156109f4576109f3610997565b5b92915050565b7f596f7520646f6e2774206861766520656e6f75676820746f6b656e7320746f2060008201527f6275726e00000000000000000000000000000000000000000000000000000000602082015250565b6000610a5660248361069d565b9150610a61826109fa565b604082019050919050565b60006020820190508181036000830152610a8581610a49565b9050919050565b6000610a9782610744565b9150610aa283610744565b9250828203905081811115610aba57610ab9610997565b5b92915050565b7f596f7520646f6e2774206861766520656e6f75676820746f6b656e7320746f2060008201527f7472616e73666572000000000000000000000000000000000000000000000000602082015250565b6000610b1c60288361069d565b9150610b2782610ac0565b604082019050919050565b60006020820190508181036000830152610b4b81610b0f565b905091905056fea26469706673582212201e24e59cff309d0e0a2cb499ed2029634f2e4fcda8b5e573d4e8a6f5d3899b2d64736f6c63430008130033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_name, _symbol, _owner, overrides || {});
  }
  override deploy(
    _name: string,
    _symbol: string,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_name, _symbol, _owner, overrides || {}) as Promise<
      ERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20__factory {
    return super.connect(runner) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20 {
    return new Contract(address, _abi, runner) as unknown as ERC20;
  }
}
